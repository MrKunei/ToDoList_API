version: "3.8"

volumes:
  postgres:

services:
  postgres:
    image: postgres:14.6-alpine
    restart: always
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_NAME}
    healthcheck:
      test: pg_isready -U postgres
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    image: mrkunei/todolist-django-app:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    restart: always
    env_file:
      - ./.env
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_NAME}
    command: sh -c "python manage.py runserver 0.0.0.0:8000"
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully

  migrations:
    image: mrkunei/todolist-django-app:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    depends_on:
      postgres:
        condition: service_healthy
    command: sh -c "python manage.py migrate"

  bot:
    image: mrkunei/todolist-django-app:$GITHUB_REF_NAME-$GITHUB_RUN_ID
    depends_on:
      postgres:
        condition: service_healthy
    command: sh -c "python manage.py runbot"

  front:
    image: sermalenk/skypro-front:lesson-38
    restart: always
    ports:
      - "8080:80"
    depends_on:
      - api